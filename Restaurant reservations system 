{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ce0e1ab-9f80-44dd-8ba1-73a73a649c38",
   "metadata": {},
   "outputs": [],
   "source": [
    "class RestaurantReservation:\n",
    "    def _init_(self, total_rooms=5):\n",
    "        self.total_rooms = total_rooms  # Total available rooms\n",
    "        self.reservations = {}  # Stores reservations as {room_number: guest_name}\n",
    "\n",
    "    \n",
    "    def display_rooms(self):\n",
    "        available_rooms = self.total_rooms - len(self.reservations)\n",
    "        print(f\"\\nTotal Rooms: {self.total_rooms}\")\n",
    "        print(f\"Reserved Rooms: {len(self.reservations)}\")\n",
    "        print(f\"Available Rooms: {available_rooms}\\n\")\n",
    "\n",
    "   \n",
    "    def make_reservation(self):\n",
    "        try:\n",
    "            name = input(\"Enter your name: \")\n",
    "            if not name.isalpha():\n",
    "                raise ValueError(\"Name should contain only letters.\")\n",
    "\n",
    "            room_number = int(input(\"Enter room number (1-5): \"))\n",
    "            if room_number not in range(1, self.total_rooms + 1):\n",
    "                raise ValueError(\"Invalid room number. Choose a room between 1 and 5.\")\n",
    "\n",
    "            if room_number in self.reservations:\n",
    "                raise ValueError(f\"Room {room_number} is already reserved.\")\n",
    "\n",
    "            self.reservations[room_number] = name\n",
    "            print(f\"Reservation confirmed for {name} in room {room_number}.\\n\")\n",
    "        except ValueError as e:\n",
    "            print(f\"Error: {e}\")\n",
    "        except Exception as e:\n",
    "            print(f\"Unexpected error: {e}\")\n",
    "\n",
    "    \n",
    "    def cancel_reservation(self):\n",
    "        try:\n",
    "            room_number = int(input(\"Enter the room number to cancel: \"))\n",
    "            if room_number not in self.reservations:\n",
    "                raise ValueError(f\"No reservation found for room {room_number}.\")\n",
    "\n",
    "            del self.reservations[room_number]\n",
    "            print(f\"Reservation for room {room_number} has been canceled.\\n\")\n",
    "        except ValueError as e:\n",
    "            print(f\"Error: {e}\")\n",
    "        except Exception as e:\n",
    "            print(f\"Unexpected error: {e}\")\n",
    "\n",
    "    \n",
    "    def display_reservations(self):\n",
    "        if self.reservations:\n",
    "            print(\"\\nCurrent Reservations:\")\n",
    "            for room, guest in self.reservations.items():\n",
    "                print(f\"Room {room}: {guest}\")\n",
    "        else:\n",
    "            print(\"\\nNo reservations yet.\\n\")\n",
    "\n",
    "\n",
    "\n",
    "def main():\n",
    "    restaurant = RestaurantReservation()  \n",
    "\n",
    "    while True:\n",
    "        try:\n",
    "            print(\"\\n--- Restaurant Room Reservation System ---\")\n",
    "            print(\"1. View available rooms\")\n",
    "            print(\"2. Make a reservation\")\n",
    "            print(\"3. Cancel a reservation\")\n",
    "            print(\"4. View current reservations\")\n",
    "            print(\"5. Exit\")\n",
    "\n",
    "            choice = int(input(\"Choose an option (1-5): \"))\n",
    "\n",
    "            if choice == 1:\n",
    "                restaurant.display_rooms()\n",
    "            elif choice == 2:\n",
    "                restaurant.make_reservation()\n",
    "            elif choice == 3:\n",
    "                restaurant.cancel_reservation()\n",
    "            elif choice == 4:\n",
    "                restaurant.display_reservations()\n",
    "            elif choice == 5:\n",
    "                print(\"Thank you for using the reservation system!\")\n",
    "                break\n",
    "            else:\n",
    "                raise ValueError(\"Please choose a valid option (1-5).\")\n",
    "\n",
    "        except ValueError as e:\n",
    "            print(f\"Error: {e}\")\n",
    "        except Exception as e:\n",
    "            print(f\"Unexpected error: {e}\")\n",
    "\n",
    "main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
